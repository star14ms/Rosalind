### hard
from util import get_data, get_output_path
from ete3 import Tree


def parse_newick(newick):
    # Parse the Newick string into a tree structure
    return Tree(newick, format=1)

def find_splits(tree):
    # This function identifies the distinct splits generated by internal nodes
    unique_splits = []
    for node in tree.traverse("postorder"):
        if not node.is_leaf():
            # Collect leaf names (taxa) under this node
            taxa_under_node = frozenset(node.get_leaf_names())
            # This set represents a unique split
            unique_splits.append(taxa_under_node)
    return unique_splits

def create_character_table(splits, all_taxa):
    # Initialize the character table
    character_table = []
    for split in splits:
        # For each split, create a row in the character table
        row = ['1' if taxon in split else '0' for taxon in all_taxa]
        character_table.append(row)
    return character_table

def print_character_table(character_table):
    # Print the character table row by row
    for row in character_table[:-1]:
        print(''.join(row))

    with open(get_output_path(__file__), 'w') as f:
        for row in character_table[:-1]:
            f.write(''.join(row) + '\n')

def solve_newick_problem(newick):
    tree = parse_newick(newick)
    all_taxa = sorted(tree.get_leaf_names())  # Sort taxa lexicographically
    splits = find_splits(tree)  # Find unique splits
    # Generate and print the character table
    character_table = create_character_table(splits, all_taxa)
    
    return character_table


if __name__ == '__main__':
    newick = get_data(__file__)
    # newick = "(dog,((elephant,mouse),robot),cat);"

    character_table = solve_newick_problem(newick)
    print_character_table(character_table)
